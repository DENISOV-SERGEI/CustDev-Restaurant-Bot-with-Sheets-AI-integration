import os
import random
from datetime import datetime, time, timedelta
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SHEET_URL = os.getenv("SHEET_URL")
SERVICE_ACCOUNT_FILE = os.getenv("GOOGLE_SERVICE_ACCOUNT")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(SHEET_URL).sheet1

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (4 —Ü–∏—Ñ—Ä—ã) ===
PROMO_FILE = "daily_promo.txt"

def get_daily_promocode():
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ (4 —Ü–∏—Ñ—Ä—ã), –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Å 12:00 –¥–æ 03:00."""
    now = datetime.now()
    today_noon = datetime.combine(now.date(), time(12, 0))

    if now < today_noon:
        cycle_date = (now - timedelta(days=1)).strftime("%Y-%m-%d")
    else:
        cycle_date = now.strftime("%Y-%m-%d")

    if os.path.exists(PROMO_FILE):
        with open(PROMO_FILE, "r", encoding="utf-8") as f:
            saved_date, saved_code = f.read().strip().split("|")
            if saved_date == cycle_date:
                return saved_code

    code = str(random.randint(1000, 9999))
    with open(PROMO_FILE, "w", encoding="utf-8") as f:
        f.write(f"{cycle_date}|{code}")
    return code


# === –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ ===
ANSWER_MAP = {
    1: ["–°–µ–≥–æ–¥–Ω—è", "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ", "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", "–†–∞–Ω–µ–µ"],
    2: ["–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á", "–£–∂–∏–Ω —Å –¥—Ä—É–∑—å—è–º–∏", "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä", "–°–µ–º–µ–π–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫", "–î—Ä—É–≥–æ–µ"]
}

# === –í–æ–ø—Ä–æ—Å—ã ===
QUESTIONS = [
    "–ö–∞–∫ –º—ã –º–æ–∂–µ–º –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
    "–ö–æ–≥–¥–∞ –í—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ—Å–µ—â–∞–ª–∏ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω?\n1. –°–µ–≥–æ–¥–Ω—è\n2. –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n3. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ\n4. –†–∞–Ω–µ–µ",
    "–ß—Ç–æ —Å—Ç–∞–ª–æ –≥–ª–∞–≤–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π –í–∞—à–µ–≥–æ –≤–∏–∑–∏—Ç–∞?\n1. –ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á\n2. –£–∂–∏–Ω —Å –¥—Ä—É–∑—å—è–º–∏\n3. –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä\n4. –°–µ–º–µ–π–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫\n5. –î—Ä—É–≥–æ–µ",
    "–ö–∞–∫–æ–µ –±–ª—é–¥–æ –∏–ª–∏ –Ω–∞–ø–∏—Ç–æ–∫ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –Ω–∞ –í–∞—Å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ?",
    "–û–ø–∏—à–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.",
    "–ß—Ç–æ –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –º–æ–≥–ª–æ –±—ã –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º –¥–ª—è –í–∞—Å?",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: –ï—Å–ª–∏ –±—ã –í—ã –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω—É –≤–µ—â—å –≤ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?"
]


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ ‚Äî —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤."""
    context.user_data.clear()
    context.user_data["step"] = 0
    chat = update.effective_chat

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    if context.args and context.args[0] == "interview":
        welcome_text = (
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ "La Bella"! üçù\n'
            '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Äî –≤—Å–µ–≥–æ 7 –≤–æ–ø—Ä–æ—Å–æ–≤!\n'
            '–ó–∞ —É—á–∞—Å—Ç–∏–µ ‚Äî –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å üéÅ\n\n'
        )
    else:
        welcome_text = (
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ "La Bella"! üçù\n'
            '–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ ‚Äî –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é, –≤—Å–µ–≥–æ 7 –≤–æ–ø—Ä–æ—Å–æ–≤.\n'
            '–ó–∞ —É—á–∞—Å—Ç–∏–µ ‚Äî –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å üéÅ\n\n'
        )

    # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
    await chat.send_message(welcome_text + QUESTIONS[0])


def convert_answer(step: int, user_input: str) -> str:
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ü–∏—Ñ—Ä—É ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""
    try:
        number = int(user_input.strip())
        if step == 1 and 1 <= number <= len(ANSWER_MAP[1]):
            return ANSWER_MAP[1][number - 1]
        elif step == 2 and 1 <= number <= len(ANSWER_MAP[2]):
            return ANSWER_MAP[2][number - 1]
    except ValueError:
        pass
    return user_input.strip()


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step", 0)
    text = update.message.text.strip()

    # === –®–∞–≥ 0: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    if step == 0:
        context.user_data["–ò–º—è"] = text
        context.user_data["UserID"] = update.message.from_user.id
        context.user_data["Username"] = (
            f"@{update.message.from_user.username}" if update.message.from_user.username else "‚Äî"
        )
        context.user_data["step"] = 1
        await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}! {QUESTIONS[1]}")
        return

    # === –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ) ===
    fields = [
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç",
        "–ü—Ä–∏—á–∏–Ω–∞ –≤–∏–∑–∏—Ç–∞",
        "–í–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –±–ª—é–¥–∞",
        "–û—Ü–µ–Ω–∫–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã",
        "–û–∂–∏–¥–∞–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞",
        "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
    ]

    if 1 <= step <= 6:
        answer = convert_answer(step, text)
        context.user_data[fields[step - 1]] = answer
        context.user_data["step"] += 1

    # === –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ===
    if context.user_data["step"] < len(QUESTIONS):
        next_q = QUESTIONS[context.user_data["step"]]
        await update.message.reply_text(next_q)
    else:
        # === –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets ===
        promo = get_daily_promocode()
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        row = [
            context.user_data.get("Username"),   # ID / Username
            timestamp,                           # –î–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞
            promo,                               # –ü—Ä–æ–º–æ –∫–æ–¥
            context.user_data.get("–ò–º—è"),        # –ò–º—è
            context.user_data.get("–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç"),
            context.user_data.get("–ü—Ä–∏—á–∏–Ω–∞ –≤–∏–∑–∏—Ç–∞"),
            context.user_data.get("–í–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –±–ª—é–¥–∞"),
            context.user_data.get("–û—Ü–µ–Ω–∫–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã"),
            context.user_data.get("–û–∂–∏–¥–∞–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞"),
            context.user_data.get("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"),
            "", "", "", ""  # –°–µ–≥–º–µ–Ω—Ç | –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å | –ì–∏–ø–æ—Ç–µ–∑–∞ (–º–µ–Ω—é) | –ì–∏–ø–æ—Ç–µ–∑–∞ (–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ)
        ]

        sheet.append_row(row)
        await update.message.reply_text(
            f"üíö –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n"
            f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 5%: {promo} ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 03:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.\n"
            "–ñ–¥—ë–º –í–∞—Å —Å–Ω–æ–≤–∞ –≤ La Bella! üåø"
        )
        context.user_data.clear()


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –æ–ø—Ä–æ—Å üòä")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    app.run_polling()


if __name__ == "__main__":
    main()
